version: '3.8'

# Development Docker Compose Configuration
# Optimized for development with hot reload, debugging, and monitoring

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cattle_management}
      POSTGRES_USER: ${POSTGRES_USER:-cattle_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dianxin99}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/src/migrations:/docker-entrypoint-initdb.d:ro
      - ./database/init-dev.sql:/docker-entrypoint-initdb.d/99-init-dev.sql:ro
    networks:
      - cattle-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cattle_user} -d ${POSTGRES_DB:-cattle_management}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
      - ./redis/redis-dev.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - cattle-dev-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Service (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-backend-dev
    environment:
      NODE_ENV: development
      DEBUG: "app:*"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-cattle_management}
      DB_USER: ${POSTGRES_USER:-cattle_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-dianxin99}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key}
      PORT: 3000
      CORS_ORIGIN: "http://localhost:5173,http://localhost:8080"
      LOG_LEVEL: debug
      ENABLE_SWAGGER: "true"
      ENABLE_PLAYGROUND: "true"
    ports:
      - "${BACKEND_PORT:-3000}:3000"
      - "9229:9229"  # Node.js debugging port
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cattle-dev-network
    restart: unless-stopped
    command: npm run dev:debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Web Service (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-frontend-dev
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:3000/api/v1
      VITE_APP_TITLE: 肉牛管理系统 (开发环境)
      VITE_APP_VERSION: 1.0.0-dev
      VITE_ENABLE_MOCK: "false"
      VITE_ENABLE_DEVTOOLS: "true"
      VITE_ENABLE_HMR: "true"
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      - backend
    networks:
      - cattle-dev-network
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Miniprogram Development Service
  miniprogram:
    build:
      context: ./miniprogram
      dockerfile: Dockerfile.dev
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-miniprogram-dev
    environment:
      NODE_ENV: development
      UNI_PLATFORM: mp-weixin
      VUE_APP_API_BASE_URL: http://localhost:3000/api/v1
      VUE_APP_TITLE: 肉牛管理系统小程序
    ports:
      - "${MINIPROGRAM_PORT:-8080}:8080"
    volumes:
      - ./miniprogram:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      - backend
    networks:
      - cattle-dev-network
    restart: unless-stopped
    command: npm run dev:mp-weixin
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Administration Tool
  adminer:
    image: adminer:latest
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-adminer-dev
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cattle-dev-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Redis Administration Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_ADMIN_PASSWORD:-admin123}
    ports:
      - "${REDIS_ADMIN_PORT:-8082}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - cattle-dev-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Development Proxy (Nginx)
  nginx-dev:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-nginx-dev
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/development.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - cattle-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # File Watcher Service (for hot reload optimization)
  file-watcher:
    image: node:18-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-file-watcher-dev
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - cattle-dev-network
    restart: unless-stopped
    command: >
      sh -c "
        npm install -g chokidar-cli &&
        chokidar '**/*.{js,ts,vue,json}' 
        --ignore 'node_modules/**' 
        --ignore 'dist/**' 
        --ignore 'logs/**'
        -c 'echo File changed: {path} at {time}'
      "
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Development Tools Container
  dev-tools:
    image: node:18-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-dev-tools
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - cattle-dev-network
    restart: "no"
    profiles:
      - tools
    command: >
      sh -c "
        echo 'Development tools container ready' &&
        echo 'Available commands:' &&
        echo '  npm run lint:all' &&
        echo '  npm run test:all' &&
        echo '  npm run format:all' &&
        tail -f /dev/null
      "

  # Log Aggregator (for development debugging)
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-logs-dev
    volumes:
      - ./monitoring/fluent-bit-dev.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./logs:/var/log/app
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cattle-dev-network
    restart: unless-stopped
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Development Metrics (Prometheus)
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-prometheus-dev
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    networks:
      - cattle-dev-network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Development Dashboard (Grafana)
  grafana-dev:
    image: grafana/grafana:latest
    container_name: ${COMPOSE_PROJECT_NAME:-cattle}-grafana-dev
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards-dev:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources-dev:/etc/grafana/provisioning/datasources:ro
    networks:
      - cattle-dev-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus-dev
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local

networks:
  cattle-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    labels:
      - "com.cattle.environment=development"
      - "com.cattle.project=${COMPOSE_PROJECT_NAME:-cattle}"