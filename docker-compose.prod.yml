version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cattle-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: cattle-backend-prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres-master
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=true
      - DB_POOL_MIN=5
      - DB_POOL_MAX=20
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=info
      - MONITORING_ENABLED=true
      - METRICS_PORT=9090
    volumes:
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs
    depends_on:
      postgres-master:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: cattle-frontend-prod
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=${API_BASE_URL}
      - VITE_APP_TITLE=${APP_TITLE}
      - VITE_APP_VERSION=${APP_VERSION}
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # PostgreSQL Master
  postgres-master:
    image: postgres:13-alpine
    container_name: cattle-postgres-master
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=${DB_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${DB_REPLICATION_PASSWORD}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./database/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./database/init-replication.sh:/docker-entrypoint-initdb.d/init-replication.sh:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL Slave (Read Replica)
  postgres-slave:
    image: postgres:13-alpine
    container_name: cattle-postgres-slave
    environment:
      - POSTGRES_MASTER_SERVICE=postgres-master
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=${DB_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${DB_REPLICATION_PASSWORD}
      - POSTGRES_MASTER_PORT_NUMBER=5432
    volumes:
      - postgres_slave_data:/var/lib/postgresql/data
      - ./database/setup-slave.sh:/docker-entrypoint-initdb.d/setup-slave.sh:ro
      - ./logs/postgres-slave:/var/log/postgresql
    depends_on:
      postgres-master:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_REPLICATION_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: cattle-redis-master
    command: redis-server /etc/redis/redis-master.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    volumes:
      - redis_master_data:/data
      - ./redis/redis-master.conf:/etc/redis/redis-master.conf:ro
      - ./logs/redis:/var/log/redis
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Slave
  redis-slave:
    image: redis:7-alpine
    container_name: cattle-redis-slave
    command: redis-server /etc/redis/redis-slave.conf
    environment:
      - REDIS_REPLICATION_MODE=slave
    volumes:
      - redis_slave_data:/data
      - ./redis/redis-slave.conf:/etc/redis/redis-slave.conf:ro
      - ./logs/redis-slave:/var/log/redis
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cattle-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      - ./logs/prometheus:/var/log/prometheus
    ports:
      - "9090:9090"
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cattle-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./logs/grafana:/var/log/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ELK Stack - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: cattle-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./logs/elasticsearch:/usr/share/elasticsearch/logs
    ports:
      - "9200:9200"
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ELK Stack - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: cattle-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - ./logs:/var/log/cattle:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ELK Stack - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: cattle-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./logs/kibana:/usr/share/kibana/logs
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: cattle-node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - "9100:9100"
    networks:
      - cattle-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cattle-cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - cattle-network
    restart: unless-stopped
    privileged: true

  # Backup Service
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    container_name: cattle-backup
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - DB_HOST=postgres-master
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
      - ./uploads:/app/uploads:ro
    depends_on:
      postgres-master:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped

volumes:
  postgres_master_data:
    driver: local
  postgres_slave_data:
    driver: local
  redis_master_data:
    driver: local
  redis_slave_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  cattle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16