version: '3.8'

services:
  # PostgreSQL主数据库
  postgres-master:
    image: postgres:14-alpine
    container_name: cattle-postgres-master
    environment:
      POSTGRES_DB: cattle_management
      POSTGRES_USER: cattle_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./database/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./database/init-replication.sh:/docker-entrypoint-initdb.d/init-replication.sh
      - ./database/backup:/backup
    networks:
      - cattle-network
    restart: unless-stopped
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cattle_user -d cattle_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL从数据库
  postgres-slave:
    image: postgres:14-alpine
    container_name: cattle-postgres-slave
    environment:
      POSTGRES_USER: cattle_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_slave_data:/var/lib/postgresql/data
      - ./database/setup-slave.sh:/docker-entrypoint-initdb.d/setup-slave.sh
    networks:
      - cattle-network
    restart: unless-stopped
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cattle_user"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis主节点
  redis-master:
    image: redis:6-alpine
    container_name: cattle-redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
      - ./redis/redis-master.conf:/usr/local/etc/redis/redis.conf
    networks:
      - cattle-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis从节点
  redis-slave:
    image: redis:6-alpine
    container_name: cattle-redis-slave
    ports:
      - "6380:6379"
    volumes:
      - redis_slave_data:/data
      - ./redis/redis-slave.conf:/usr/local/etc/redis/redis.conf
    networks:
      - cattle-network
    restart: unless-stopped
    depends_on:
      redis-master:
        condition: service_healthy
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务 - 实例1
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: cattle-backend-1
    environment:
      NODE_ENV: production
      DB_HOST: postgres-master
      DB_SLAVE_HOST: postgres-slave
      DB_PORT: 5432
      DB_NAME: cattle_management
      DB_USER: cattle_user
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
      INSTANCE_ID: backend-1
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs/backend-1:/app/logs
    depends_on:
      postgres-master:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务 - 实例2
  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: cattle-backend-2
    environment:
      NODE_ENV: production
      DB_HOST: postgres-master
      DB_SLAVE_HOST: postgres-slave
      DB_PORT: 5432
      DB_NAME: cattle_management
      DB_USER: cattle_user
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
      INSTANCE_ID: backend-2
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs/backend-2:/app/logs
    depends_on:
      postgres-master:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: cattle-frontend
    volumes:
      - ./logs/frontend:/var/log/nginx
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: cattle-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
    depends_on:
      backend-1:
        condition: service_healthy
      backend-2:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - cattle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库备份服务
  db-backup:
    image: postgres:14-alpine
    container_name: cattle-db-backup
    environment:
      POSTGRES_HOST: postgres-master
      POSTGRES_DB: cattle_management
      POSTGRES_USER: cattle_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # 每天凌晨2点备份
      BACKUP_RETENTION_DAYS: 30
    volumes:
      - ./database/backup:/backup
      - ./scripts/backup.sh:/backup.sh
    networks:
      - cattle-network
    restart: unless-stopped
    depends_on:
      postgres-master:
        condition: service_healthy
    command: /backup.sh

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cattle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cattle-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cattle-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cattle-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # 日志收集 - Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.5.0
    container_name: cattle-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cattle-network
    restart: unless-stopped
    depends_on:
      - backend-1
      - backend-2
      - nginx

volumes:
  postgres_master_data:
  postgres_slave_data:
  redis_master_data:
  redis_slave_data:
  prometheus_data:
  grafana_data:

networks:
  cattle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16