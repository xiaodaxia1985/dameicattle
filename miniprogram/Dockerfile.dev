# Miniprogram Development Dockerfile
# Optimized for uni-app development with watch mode

FROM node:18-alpine as base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    bash \
    git \
    python3 \
    make \
    g++

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files
COPY package*.json ./

# Development stage
FROM base as development

# Install all dependencies (including dev dependencies)
RUN npm ci --include=dev

# Install global development tools
RUN npm install -g \
    @vue/cli \
    @vue/cli-service \
    cross-env

# Copy source code
COPY . .

# Create necessary directories
RUN mkdir -p dist src/static

# Set permissions
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose port
EXPOSE 8080

# Health check (for H5 development)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080 || exit 1

# Default command for miniprogram development
CMD ["npm", "run", "dev:mp-weixin"]

# H5 development stage
FROM development as h5-development

# Expose H5 development port
EXPOSE 8080

# Command for H5 development
CMD ["npm", "run", "dev:h5"]

# Production stage (for reference)
FROM nginx:alpine as production

# Copy built application
COPY dist/build/h5 /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]