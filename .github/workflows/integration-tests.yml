name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - integration
          - contract
          - performance
          - e2e

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '13'
  REDIS_VERSION: '7'

jobs:
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            tests/integration/node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Install integration test dependencies
        run: cd tests/integration && npm ci

      - name: Install Playwright browsers
        run: cd tests/integration && npx playwright install --with-deps

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == '' }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: cattle_management_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            tests/integration/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Setup test environment
        run: |
          cd tests/integration
          node scripts/setup-test-environment.js
        env:
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380
          NODE_ENV: test

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5433 -U postgres; do sleep 1; done'
          timeout 60 bash -c 'until redis-cli -h localhost -p 6380 ping; do sleep 1; done'

      - name: Run integration tests
        run: |
          cd tests/integration
          npm run test:integration
        env:
          CI: true
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            tests/integration/test-results/
            tests/integration/coverage/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: tests/integration/coverage
          flags: integration
          name: integration-tests

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'contract' || github.event.inputs.test_type == '' }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: cattle_management_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            tests/integration/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Setup test environment
        run: |
          cd tests/integration
          node scripts/setup-test-environment.js
        env:
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380
          NODE_ENV: test

      - name: Run contract tests
        run: |
          cd tests/integration
          npm run test:contract
        env:
          CI: true
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380

      - name: Upload contract test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: contract-test-results
          path: tests/integration/test-results/
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == '' }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: cattle_management_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            tests/integration/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Setup test environment
        run: |
          cd tests/integration
          node scripts/setup-test-environment.js
        env:
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380
          NODE_ENV: test

      - name: Run performance tests
        run: |
          cd tests/integration
          npm run test:performance
        env:
          CI: true
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: tests/integration/test-results/
          retention-days: 7

      - name: Performance regression check
        run: |
          cd tests/integration
          node scripts/check-performance-regression.js
        if: github.event_name == 'pull_request'

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == '' }}
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: cattle_management_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
            tests/integration/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Playwright browsers
        run: cd tests/integration && npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test environment
        run: |
          cd tests/integration
          node scripts/setup-test-environment.js
        env:
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380
          NODE_ENV: test

      - name: Run E2E tests
        run: |
          cd tests/integration
          npm run test:e2e -- --project=${{ matrix.browser }}
        env:
          CI: true
          DB_HOST: localhost
          DB_PORT: 5433
          DB_NAME: cattle_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6380

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            tests/integration/test-results/
            tests/integration/playwright-report/
          retention-days: 7

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            backend/node_modules
            frontend/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd backend && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.7.0
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          target: 'http://localhost:5173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [integration-tests, contract-tests, performance-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate comprehensive test report
        run: |
          cd tests/integration
          npm ci
          node scripts/generate-test-report.js ../../test-artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}

      - name: Upload comprehensive test report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: tests/integration/test-results/comprehensive-report.html
          retention-days: 30

      - name: Comment PR with test results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = path.join('tests/integration/test-results', 'pr-comment.md');
              if (fs.existsSync(reportPath)) {
                const comment = fs.readFileSync(reportPath, 'utf8');
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not post PR comment:', error.message);
            }

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [integration-tests, contract-tests, performance-tests, e2e-tests, report]
    if: always()
    
    steps:
      - name: Cleanup test environment
        run: |
          # Kill any remaining processes
          pkill -f "node.*cattle" || true
          pkill -f "npm.*dev" || true
          
          # Clean up Docker containers
          docker ps -aq --filter "name=cattle-test" | xargs -r docker rm -f
          
          # Clean up volumes
          docker volume ls -q --filter "name=cattle-test" | xargs -r docker volume rm
          
          echo "Cleanup completed"

# Workflow configuration
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Permissions
permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write